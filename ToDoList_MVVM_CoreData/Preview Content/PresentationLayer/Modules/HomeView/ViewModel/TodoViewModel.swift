//
//  TodoViewModel.swift
//  ToDoList_MVVM_CoreData
//
//  Created by –ú–∞–∫—Å–∏–º –§—Ä–∞–Ω—Ü—É–∑–æ–≤ on 16.01.2025.
//

import Foundation
import CoreData
import Combine

class TodoViewModel: ObservableObject {
    @Published private(set) var tasks: [TaskDomainEntity] = []
    @Published private(set) var isLoading: Bool = false
    @Published private(set) var error: Error?
    @Published var searchText: String = ""
    
    private let fetchLocalTasksUseCase: FetchLocalTasksUseCase
    private let fetchRemoteTasksUseCase: FetchRemoteTasksUseCase
    private let createTaskUseCase: CreateTaskUseCase
    private let deleteTaskUseCase: DeleteTaskUseCase
    private let toggleTaskCompletionUseCase: ToggleTaskCompletionUseCase
    private let deleteAllTasksUseCase: DeleteAllTasksUseCase
    
    init(
        fetchLocalTasksUseCase: FetchLocalTasksUseCase = FetchLocalTasksUseCase(taskRepository: TaskRepository()),
        fetchRemoteTasksUseCase: FetchRemoteTasksUseCase = FetchRemoteTasksUseCase(taskRepository: TaskRepository()),
        createTaskUseCase: CreateTaskUseCase = CreateTaskUseCase(taskRepository: TaskRepository()),
        deleteTaskUseCase: DeleteTaskUseCase = DeleteTaskUseCase(taskRepository: TaskRepository()),
        toggleTaskCompletionUseCase: ToggleTaskCompletionUseCase = ToggleTaskCompletionUseCase(taskRepository: TaskRepository()),
        deleteAllTasksUseCase: DeleteAllTasksUseCase = DeleteAllTasksUseCase(taskRepository: TaskRepository())
    ) {
        self.fetchLocalTasksUseCase = fetchLocalTasksUseCase
        self.fetchRemoteTasksUseCase = fetchRemoteTasksUseCase
        self.createTaskUseCase = createTaskUseCase
        self.deleteTaskUseCase = deleteTaskUseCase
        self.toggleTaskCompletionUseCase = toggleTaskCompletionUseCase
        self.deleteAllTasksUseCase = deleteAllTasksUseCase
    }
    
    // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ searchText
    var filteredTasks: [TaskDomainEntity] {
        if searchText.isEmpty {
            return tasks
        }
        return tasks.filter { task in
            task.title.localizedCaseInsensitiveContains(searchText)
        }
    }
    
    @MainActor
    func loadData() async {
        isLoading = true
        do {
            // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (CoreData)
            let localTasks = try await fetchLocalTasksUseCase.execute()
            print("üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á –∏–∑ CoreData: \(localTasks.count)")
            
            if localTasks.isEmpty {
                print("‚ÑπÔ∏è –õ–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞...")
                // 2. –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
                let remoteTasks = try await fetchRemoteTasksUseCase.execute()
                print("üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á —Å —Å–µ—Ä–≤–µ—Ä–∞: \(remoteTasks.count)")
                
                // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (CoreData)
                for task in remoteTasks {
                    try await createTaskUseCase.execute(
                        id: task.id,
                        title: task.title,
                        description: task.taskDescription,
                        date: task.date,
                        isCompleted: task.isCompleted
                    )
                }
                print("‚úÖ –ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ CoreData")
                
                // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
                tasks = try await fetchLocalTasksUseCase.execute()
            } else {
                print("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ CoreData")
                // 5. –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                tasks = localTasks
            }
        } catch {
            self.error = error
            print("‚ùå Error fetching tasks: \(error.localizedDescription)")
        }
        isLoading = false
    }
    
//    @MainActor
//    func addTask(title: String, description: String) async {
//        do {
//            let task = try await createTaskUseCase.execute(id: <#UUID#>, title: title, description: description, date: Date(), isCompleted: false)
//            tasks.append(task)
//        } catch {
//            print("‚ùå Error creating task: \(error.localizedDescription)")
//        }
//    }
    
    @MainActor
    func deleteTask(byId id: UUID) async {
        do {
            try await deleteTaskUseCase.execute(byId: id)
            tasks.removeAll { $0.id == id }
        } catch {
            print("‚ùå Error deleting task: \(error.localizedDescription)")
        }
    }
    
    @MainActor
    func toggleTaskCompletion(task: TaskDomainEntity) async {
        do {
            // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º isCompleted
            print("–°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º isCompleted")
            print("ID –∑–∞–¥–∞—á–∏: \(task.id)")
            let updatedTask = TaskDomainEntity(
                id: task.id,
                title: task.title,
                taskDescription: task.taskDescription,
                date: task.date,
                isCompleted: !task.isCompleted // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            )
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ CoreData
            print("–û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ CoreData \(updatedTask.id)")
            try await toggleTaskCompletionUseCase.execute(task: updatedTask)
            print("–û–±–Ω–æ–≤–∏–ª–∏ –∑–∞–¥–∞—á—É –≤ CoreData")
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
            if let index = tasks.firstIndex(where: { $0.id == updatedTask.id }) {
                tasks[index] = updatedTask
            }
            print("–û–±–Ω–æ–≤–∏–ª–∏ –∑–∞–¥–∞—á—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        } catch {
            print("‚ùå Error toggling task completion: \(error.localizedDescription)")
        }
    }
    
    @MainActor
    func clearAllData() async {
        do {
            tasks = []
            try await deleteAllTasksUseCase.execute()
            
            print("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        } catch {
            self.error = error
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö: \(error.localizedDescription)")
        }
    }
}
