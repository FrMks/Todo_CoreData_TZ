//
//  TodoViewModel.swift
//  ToDoList_MVVM_CoreData
//
//  Created by –ú–∞–∫—Å–∏–º –§—Ä–∞–Ω—Ü—É–∑–æ–≤ on 16.01.2025.
//

import Foundation
import CoreData
import Combine

class TodoViewModel: ObservableObject {
    @Published private(set) var todos: [TodoDTO] = []
    @Published private(set) var tasks: [TaskEntity] = []
    @Published private(set) var isLoading: Bool = false
    @Published private(set) var error: Error?
    @Published var searchText: String = ""
    
    private let coreDataManager = CoreDataManager.shared
    private let networkService = NetworkService()
    
    var filteredTasks: [TaskEntity] {
        if searchText.isEmpty {
            return tasks
        }
        return tasks.filter { task in
            task.title.localizedCaseInsensitiveContains(searchText)
        }
    }
    
    @MainActor
    func loadData() async {
        isLoading = true
        loadTasksFromCoreData()
        
        if tasks.isEmpty {
            do {
                let fetchedTodos = try await networkService.fetchTodos()
                //–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ CoreData
                for todo in fetchedTodos {
                    coreDataManager.createTask(id: todo.uuid,
                                               title: todo.todo,
                                               taskDescription: "",
                                               date: Date(),
                                               isCompleted: todo.completed)
                }
                //–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                loadTasksFromCoreData()
            } catch {
                self.error = error
                print("Error fetching todos: \(error.localizedDescription)")
            }
        }
        isLoading = false
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    @MainActor
    func addTask(title: String, description: String) {
        let newId = UUID()
        //let newId = Int16(tasks.count)
        coreDataManager.createTask(
            //id: newId,
            id: newId,
            title: title,
            taskDescription: description,
            date: Date(),
            isCompleted: false
        )
        loadTasksFromCoreData()
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    @MainActor
    func toggleTaskCompletion(task: TaskEntity) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        let newValue = !task.isCompleted
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ CoreData
        coreDataManager.updateTask(task: task, isCompleted: newValue)
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        coreDataManager.saveContext()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if let index = tasks.firstIndex(where: { $0.id == task.id }) {
            tasks[index].isCompleted = newValue
            objectWillChange.send()
        }
    }
    
    
    
    @MainActor
    func deleteTask(task: TaskEntity) {
        print("üóëÔ∏è TodoViewModel: Starting task deletion")
        
        // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ tasks
        if let index = tasks.firstIndex(where: { $0.id == task.id }) {
            print("üóëÔ∏è TodoViewModel: Removing task from local tasks array")
            tasks.remove(at: index)
            objectWillChange.send() // –û–±–Ω–æ–≤–ª—è–µ–º UI
            print("‚úÖ TodoViewModel: Task removed from UI")
        } else {
            print("‚ÑπÔ∏è TodoViewModel: Task not found in local tasks array")
        }
        
        // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ CoreData
        coreDataManager.deleteTask(task: task)
        
        print("‚úÖ TodoViewModel: Task deletion process completed")
    }
    
//    @MainActor
//    func deleteTask(task: TaskList) {
//        print("üóëÔ∏è TodoViewModel: Starting task deletion")
//        guard let taskToDelete = coreDataManager.fetchTaskById(byId: task.id) else {
//            print("‚ùå TodoViewModel: Task not found for deletion")
//            return
//        }
//        
//        coreDataManager.deleteTask(task: taskToDelete)
//        print("‚ôªÔ∏è TodoViewModel: Reloading tasks after deletion")
//        loadTasksFromCoreData() // Ensure this updates the UI
//    }
    
//    @MainActor
//    func deleteTask(byId id: UUID) {
//        print("üóëÔ∏è TodoViewModel: Starting task deletion by id: \(id)")
//        
//        // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ tasks
//        if let index = tasks.firstIndex(where: { $0.id == id }) {
//            print("üóëÔ∏è TodoViewModel: Removing task from local tasks array at index: \(index)")
//            tasks.remove(at: index)
//            objectWillChange.send() // –û–±–Ω–æ–≤–ª—è–µ–º UI
//            print("‚úÖ TodoViewModel: Task removed from UI")
//        } else {
//            print("‚ÑπÔ∏è TodoViewModel: Task not found in local tasks array")
//        }
//        
//        // –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ CoreData
//        print("üóëÔ∏è TodoViewModel: Deleting task from CoreData")
//        coreDataManager.deleteTask(byId: id)
//        
//        print("‚úÖ TodoViewModel: Task deletion process completed")
//    }
    
    @MainActor
        func deleteTask(byId id: UUID)  {
            print("üóëÔ∏è TodoViewModel: Starting task deletion by id: \(id)")
            
            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞, –∏—Å–∫–ª—é—á–∞—è —É–¥–∞–ª—è–µ–º—É—é –∑–∞–¥–∞—á—É
            tasks = tasks.filter { $0.id != id }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            print("üîÑ TodoViewModel: Updating UI after filtering tasks")
            objectWillChange.send()
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ CoreData
            print("üóëÔ∏è TodoViewModel: Deleting task from CoreData")
            coreDataManager.deleteTask(byId: id)
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            print("üîÑ TodoViewModel: Reloading tasks from CoreData")
            loadTasksFromCoreData()
            
            print("‚úÖ TodoViewModel: Task deletion process completed")
        }

    @MainActor
    func loadTasksFromCoreData() {
        print("üì• TodoViewModel: Starting to load tasks from CoreData")
        tasks = coreDataManager.fetchTasks()
        print("‚úÖ TodoViewModel: Loaded \(tasks.count) tasks from CoreData")
    }


    
    @MainActor
    func clearAllData() {
        coreDataManager.deleteAllData()
        tasks = []
    }
}
